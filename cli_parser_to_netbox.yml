---
# grapping and pushing data from Network to NetBox
# using 3 different parsing methods:
# pyATS, ntc_templates, facts

- name: PARSE DATA FROM NETWORK DEVICES AND INSERT TO NETBOX
  hosts: 
    - ios
  gather_facts: no
  connection: network_cli
  vars:
    _netbox_url: "https://172.16.1.17"
    _api_token: "0123456789abcdef0123456789abcdef01234567"
    _default_mac: "00:00:00:00:00:00"

  tasks:

  - name: ADD DEVICE INFORMATION
    block:
    - name: capture and parse 'show version' 
      ansible.netcommon.cli_parse:
        command: "show version"
        parser:
          name: ansible.netcommon.pyats
      register: _device_result
    - debug:
        var: _device_result.parsed.version
        verbosity: 2
    - name: push device data to netbox
      netbox.netbox.netbox_device:
        netbox_url: "{{ _netbox_url }}"
        netbox_token: "{{ _api_token }}"
        validate_certs: no
        data: 
          name: "{{ inventory_hostname }}"
          site: "hetzner"
          serial: "{{ _device_result.parsed.version.chassis_sn | default(omit) }}"
          device_type: "{{ _device_result.parsed.version.platform | default('unknown') }}"
          device_role: "router"
          comments: "added by Ansible"
    tags: version

  - name: ADD INTERFACE INFORMATION
    block:
    - name: capture and parse 'show interface'
      ansible.netcommon.cli_parse:
        command: "show interfaces"
        parser:
          name: ansible.netcommon.ntc_templates
      register: _int_result
    - debug:
        var: _int_result.parsed
        verbosity: 2
    - name: push interface data to netbox
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ _netbox_url }}"
        netbox_token: "{{ _api_token }}"
        validate_certs: no
        data:
          device: "{{ inventory_hostname }}"
          name: "{{ item.interface }}"
          description: "{{ item.description | default(omit) }}"
          mac_address: "{{ item.address | default(_default_mac, true) | ansible.netcommon.hwaddr('linux') }}"
          type: "Virtual"
          mtu: "{{ item.mtu | default(omit) }}"
      loop: "{{ _int_result.parsed }}"
      loop_control:
        label: "{{ item.interface }}"
    - name: push IP addresses to device interfaces
      netbox.netbox.netbox_ip_address:
        netbox_url: "{{ _netbox_url }}"
        netbox_token: "{{ _api_token }}"
        validate_certs: no
        data:
          address: "{{ item.ip_address }}"
          interface:
            name: "{{ item.interface }}"
            device: "{{ inventory_hostname }}"
      loop: "{{ _int_result.parsed }}"
      loop_control:
        label: "{{ item.interface }} ==> {{ item.ip_address }}"
      when: item.ip_address != ""
    tags: intf

  - name: ADD VLAN INFORMATION FOR L2 DEVICES TO NETBOX
    block:
    - name: gather facts for VLAN information
      cisco.ios.ios_facts:
        gather_network_resources: 
          - "vlans"
          - "l2_interfaces"
        gather_subset:
          - '!all'
          - '!min'
      register: _vlan_result
      become: true
      when: ansible_network_os == 'ios'
    - name: print facts
      debug:
        var: _vlan_result
        verbosity: 2
    - name: push VLAN database to netbox
      netbox.netbox.netbox_vlan:
        netbox_url: "{{ _netbox_url }}"
        netbox_token: "{{ _api_token }}"
        validate_certs: no
        data:
          name: "{{ item.name }}"
          tags: "[{{ item.state }}]"
          vid: "{{ item.vlan_id }}"
          site: "hetzner"
      loop: "{{ _vlan_result.ansible_facts.ansible_network_resources.vlans }}"
      loop_control:
        label: "{{ item.name }} ==> {{ item.vlan_id }}"
      when: inventory_hostname == "iosvl2-2"
    - name: push intf access VLAN to netbox
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ _netbox_url }}"
        netbox_token: "{{ _api_token }}"
        validate_certs: no
        data:
          device: "{{ inventory_hostname }}"
          name: "{{ item.name }}"
          mode: "access"
          untagged_vlan: "{{ item.access.vlan | default(omit) }}"
      loop: "{{ _vlan_result.ansible_facts.ansible_network_resources.l2_interfaces }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.access is defined
    when: inventory_hostname in groups['switch']
    tags: vlan




    # - name: push intf trunks to netbox
    #   netbox.netbox.netbox_device_interface:
    #     netbox_url: "{{ _netbox_url }}"
    #     netbox_token: "{{ _api_token }}"
    #     validate_certs: no
    #     data:
    #       device: "{{ inventory_hostname }}"
    #       name: "{{ item.name }}"
    #       mode: "tagged"
    #       tagged_vlans: [14]
    #   loop: "{{ _vlan_result.ansible_facts.ansible_network_resources.l2_interfaces }}"
    #   when: item.mode is defined and item.mode == "trunk"
